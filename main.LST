C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\main.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include "reg932.h"
   2          #include "uart.h"
   3          #include <stdlib.h>
   4          sbit mole0_0 = P2 ^ 4; //LEDs
   5          sbit mole0_1 = P0 ^ 5;
   6          sbit mole0_2 = P2 ^ 7;
   7          sbit mole1_0 = P0 ^ 6;
   8          sbit mole1_1 = P1 ^ 6;
   9          sbit mole1_2 = P0 ^ 4;
  10          sbit mole2_0 = P2 ^ 5;
  11          sbit mole2_1 = P0 ^ 7;
  12          sbit mole2_2 = P2 ^ 6;
  13          
  14          sbit hole0_0 = P2 ^ 0; //Buttons
  15          sbit hole0_1 = P0 ^ 1;
  16          sbit hole0_2 = P2 ^ 3;
  17          sbit hole1_0 = P0 ^ 2;
  18          sbit hole1_1 = P1 ^ 4;
  19          sbit hole1_2 = P0 ^ 0;
  20          sbit hole2_0 = P2 ^ 1;
  21          sbit hole2_1 = P0 ^ 3;
  22          sbit hole2_2 = P2 ^ 2;
  23          
  24          sbit speaker = P1 ^ 7;//Speaker / buzzer
  25          
  26          #define DIFFICULTY_ONE = 20;
  27          #define DIFFICULTY_TWO = 40; //arbitrary test numbers, change these later
  28          #define DIFFICULTY_THREE = 60;
  29          
  30          
  31          void delay();
  32          void getTone();
  33          void missTone();
  34          void sendData(char score);
  35          void setLED(unsigned char row, unsigned char col); //Sets the specified LED (sets it to 0)
  36          void clearLED(unsigned char row, unsigned char col); //Clears the specified LED (sets it to 1)
  37          unsigned char getHole(unsigned char row, unsigned char col); //Gets the current value for the button
  38          unsigned char wait(int difficulty, unsigned char row, unsigned char col); //Will return 1 if the button is
             - pressed on time
  39          unsigned char swapBytes(int); //no idea
  40          void setPorts(void); //Making sure the LED's work on the simon-board by setting them into bi-directional m
             -ode
  41          void clearAll(); //Clears all LED's on the board, could prove useful
  42          void setAll(); //Sets all LED's on the board
  43          unsigned char setDifficulty();
  44          
  45          void buzz() interrupt 1 {
  46   1      
  47   1      speaker = ~speaker;
  48   1      
  49   1      }
  50          
  51          void main(void) {
  52   1      
  53   1          unsigned int difficulty; //using the max demay for a timer, this is the number of loops that we will w
C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 2   

             -ait for at max time
  54   1          unsigned char test = 0;
  55   1          unsigned char menu = 0; //Var to decide if the game is over (main loop control var)
  56   1      	unsigned char gameOver = 0;
  57   1      	unsigned char row = 0;
  58   1      	unsigned char col = 0;
  59   1      	unsigned char score = 0;
  60   1      	unsigned char result = 0;
  61   1      	unsigned char i = 0;
  62   1      	setPorts(); //has to be called after these variables are declared
  63   1      	setLED(0, 0); //Difficulty One
  64   1          setLED(0, 1); //Difficulty Two
  65   1          setLED(0, 2); //Difficulty Three
  66   1      	uart_init();
  67   1          
  68   1          while (1) {
  69   2            
  70   2      	  do { //Main Menu Loop
  71   3              //Should probably do this all in a function to keep our Main clean, fuck it, i'll do that
  72   3              if (!getHole(0, 0)) {
  73   4                difficulty = 20;
  74   4      		  menu = 1;
  75   4              } else if (!getHole(0, 1)) {
  76   4                difficulty = 40;
  77   4      		  menu = 1;
  78   4              } else if (!getHole(0, 2)) {
  79   4                difficulty = 60;
  80   4      		  menu = 1;
  81   4              }
  82   3            } while (!menu);
  83   2      	  clearLED(0, 0);
  84   2      	  clearLED(0, 1);
  85   2      	  clearLED(0, 2);
  86   2      
  87   2      	  //Game Loop
  88   2      	  do {
  89   3      		row = rand() % 3;
  90   3      		col = rand() % 3;
  91   3      		setLED(row, col);
  92   3      		result = wait(difficulty, row, col);
  93   3      		if(result) {
  94   4      			sendData(score);
  95   4      			getTone();
  96   4      			score++;
  97   4      			//Send Score to Serial
  98   4      		}
  99   3      		else {
 100   4      			//Light up ohe LED on breabdoard
 101   4      			missTone();
 102   4      			missTone();
 103   4      			missTone();
 104   4      		}
 105   3      		clearLED(row, col);
 106   3      		delay();
 107   3      		delay();
 108   3      
 109   3      		
 110   3      
 111   3      	  }while(!gameOver);	  
 112   2          }
 113   1      
 114   1        } //End main
C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 3   

 115          
 116          void setLED(unsigned char row, unsigned char col) {
 117   1        switch (row) {
 118   2        	case 0:
 119   2          {
 120   3            switch (col) {
 121   4            case 0:
 122   4              mole0_0 = 0;
 123   4              break;
 124   4            case 1:
 125   4              mole0_1 = 0;
 126   4              break;
 127   4            case 2:
 128   4              mole0_2 = 0;
 129   4              break;
 130   4            } //end switch col
 131   3          } //end case 0
 132   2          break;
 133   2        case 1:
 134   2          {
 135   3            switch (col) {
 136   4            case 0:
 137   4              mole1_0 = 0;
 138   4              break;
 139   4            case 1:
 140   4              mole1_1 = 0;
 141   4              break;
 142   4            case 2:
 143   4              mole1_2 = 0;
 144   4              break;
 145   4            } //end switch col
 146   3          } //end case 1
 147   2          break;
 148   2        case 2:
 149   2          {
 150   3            switch (col) {
 151   4            case 0:
 152   4              mole2_0 = 0;
 153   4              break;
 154   4            case 1:
 155   4              mole2_1 = 0;
 156   4              break;
 157   4            case 2:
 158   4              mole2_2 = 0;
 159   4              break;
 160   4            } //end switch col
 161   3          } //end case 2
 162   2          break;
 163   2        } //end case switch
 164   1      }
 165          
 166          void clearLED(unsigned char row, unsigned char col) {
 167   1        switch (row) {
 168   2        case 0:
 169   2          {
 170   3            switch (col) {
 171   4            case 0:
 172   4              mole0_0 = 1;
 173   4              break;
 174   4            case 1:
 175   4              mole0_1 = 1;
 176   4              break;
C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 4   

 177   4            case 2:
 178   4              mole0_2 = 1;
 179   4              break;
 180   4            } //end switch col
 181   3          } //end case 0
 182   2          break;
 183   2        case 1:
 184   2          {
 185   3            switch (col) {
 186   4            case 0:
 187   4              mole1_0 = 1;
 188   4              break;
 189   4            case 1:
 190   4              mole1_1 = 1;
 191   4              break;
 192   4            case 2:
 193   4              mole1_2 = 1;
 194   4              break;
 195   4            } //end switch col
 196   3          } //end case 1
 197   2          break;
 198   2        case 2:
 199   2          {
 200   3            switch (col) {
 201   4            case 0:
 202   4              mole2_0 = 1;
 203   4              break;
 204   4            case 1:
 205   4              mole2_1 = 1;
 206   4              break;
 207   4            case 2:
 208   4              mole2_2 = 1;
 209   4              break;
 210   4            } //end switch col
 211   3          } //end case 2
 212   2          break;
 213   2        } //end case switch
 214   1      }
 215          
 216          unsigned char getHole(unsigned char row, unsigned col) //Gets the value for the button
 217            {
*** WARNING C235 IN LINE 217 OF .\MAIN.C: parameter 2: different types
 218   1          switch (row) {
 219   2          case 0:
 220   2            {
 221   3              switch (col) {
 222   4              case 0:
 223   4                return ((unsigned char) hole0_0);
 224   4                break;
 225   4              case 1:
 226   4                return ((unsigned char) hole0_1);
 227   4                break;
 228   4              case 2:
 229   4                return ((unsigned char) hole0_2);
 230   4                break;
 231   4              } //end switch col
 232   3            } //end case 0
 233   2            break;
 234   2          case 1:
 235   2            {
 236   3              switch (col) {
 237   4              case 0:
C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 5   

 238   4                return ((unsigned char) hole1_0);
 239   4                break;
 240   4              case 1:
 241   4                return ((unsigned char) hole1_1);
 242   4                break;
 243   4              case 2:
 244   4                return ((unsigned char) hole1_2);
 245   4                break;
 246   4              } //end switch col
 247   3            } //end case 1
 248   2            break;
 249   2          case 2:
 250   2            {
 251   3              switch (col) {
 252   4              case 0:
 253   4                return ((unsigned char) hole2_0);
 254   4                break;
 255   4              case 1:
 256   4                return ((unsigned char) hole2_1);
 257   4                break;
 258   4              case 2:
 259   4                return ((unsigned char) hole2_2);
 260   4                break;
 261   4              } //end switch col
 262   3            } //end case 2
 263   2            break;
 264   2          } //end case switch
 265   1        }
 266          
 267          unsigned char wait(int difficulty, unsigned char row, unsigned char col) //Boolean is not a default type i
             -n C. Will return 1 if button is pressed on time
 268            {
 269   1          unsigned int index;
 270   1          TMOD = 0x01;
 271   1      	
 272   1      
 273   1          for (index = 0; index < difficulty; index++) {
 274   2      	  TH0 = 0x00;
 275   2            TL0 = 0x00; //These delays must be observable by humans, so difficulty will be number of loops
 276   2            TR0 = 1;
 277   2            while (!TF0) //wait for the max time
 278   2            {
 279   3              if (getHole(row, col) == 0) //buttons are low if pressed, getHole will generate some overhead
 280   3              {
 281   4                TR0 = 0; //Stop timer
 282   4                TF0 = 0; //Reset overflow
 283   4                return 1; //Return 1 is presses
 284   4              } //end if
 285   3            } //end while
 286   2      	  TF0 = 0;
 287   2      	  TR0 = 0;
 288   2          } //end for, difficulty 
 289   1          return 0; //button was never pressed			
 290   1        } //end wait function
 291          
 292          void setPorts(void) {
 293   1        P0M1 = 0x00; //Set ports 0, 1, and 2 into bi-mode - comment out until it's ready for the simon2
 294   1        P0M2 = 0x00;
 295   1        P1M1 = 0x00;
 296   1        P1M2 = 0x00;
 297   1        P2M1 = 0x00;
 298   1        P2M2 = 0x00;
C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 6   

 299   1      }
 300          
 301          /*int swapBytes(int x)
 302          {
 303              return ((x & 0x00FF)<< 8 | (x & 0xFF00)>>8 );
 304          }*/
 305          
 306          
 307          /*void clearAll() {
 308            for (unsigned char i = 0; i < 3; i++) {
 309              for (unsigned char k = 0; k < 3; k++) {
 310                clearLED(i, k);
 311              }
 312            }
 313          }
 314          
 315          void setAll() {
 316            for (unsigned char i = 0; i < 3; i++) {
 317              for (unsigned char k = 0; k < 3; k++) {
 318                setLED(i, k);
 319              }
 320            }
 321          }*/
 322          
 323          
 324          void delay() {
 325   1      	unsigned int i = 0;
 326   1      	TMOD = 0x10;
 327   1      	for(i = 0; i < 40; i++) {
 328   2      		TH1 = 0xF0;
 329   2      		TL1 = 0x00;
 330   2      		TR1 = 1;
 331   2      		while(TF1 == 0);
 332   2      		TR1 = 0;
 333   2      		TF1 = 0;	
 334   2      	
 335   2      		}
 336   1      	
 337   1      	return;
 338   1      }
 339          
 340          
 341          void getTone() {//C ^ 6, 1046 Hz, (1/1046) = 0.00096s = 960us, 960us/(1.085/6*) = 5309 *(This microcontrol
             -ler is 6 times faster than the standard 8051)
 342   1      	TMOD = 0x01;
 343   1      	TH0 = 0xEB;
 344   1      	TL0 = 0x42;
 345   1      	EA = 1;
 346   1      	ET0 = 1;
 347   1      	TR0 = 1;
 348   1      	delay();
 349   1      	TR0 = 0;
 350   1      	TF0 = 0;
 351   1      	EA = 0;
 352   1      	ET0 = 0;
 353   1      
 354   1      	return;
 355   1      }
 356          
 357          void missTone() {//C ^ 6, 1046 Hz, (1/1046) = 0.00096s = 960us, 960us/(1.085/6*) = 5309 *(This microcontro
             -ller is 6 times faster than the standard 8051)
 358   1      	TMOD = 0x01;
C51 COMPILER V6.02  MAIN                                                                   05/05/2017 16:51:02 PAGE 7   

 359   1      	TH0 = 0xFF;
 360   1      	TL0 = 0xFF;
 361   1      	EA = 1;
 362   1      	ET0 = 1;
 363   1      	TR0 = 1;
 364   1      	delay();
 365   1      	TR0 = 0;
 366   1      	TF0 = 0;
 367   1      	EA = 0;
 368   1      	ET0 = 0;
 369   1      
 370   1      	return;
 371   1      }
 372          void sendData(char score) {
 373   1      unsigned char i = 0;
 374   1      char temp = 0;
 375   1      char sc[10] = "Score :";
 376   1      
 377   1      /*while(sc[i] != '\0'){
 378   1      	uart_transmit(sc[i]);
 379   1      	i++;
 380   1      }*/
 381   1      
 382   1      i = 0;
 383   1      temp = score+0x30;
 384   1      uart_transmit(temp);
 385   1      uart_transmit('\r');
 386   1      uart_transmit('\n');
 387   1      
 388   1      
 389   1      }
 390          
 391          
 392          
 393          
 394          
 395          
 396          
 397          
 398          
 399          
 400          
 401          
 402          
 403          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    675    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
